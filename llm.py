import os
from openai import OpenAI
from dotenv import load_dotenv
import json
from enum import Enum

load_dotenv()

client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

class MessageIntent(Enum):
    ADD_EXPENSE = "add_expense"
    EDIT_EXPENSE = "edit_expense"
    GREETING = "greeting"
    QUESTION = "question"
    UNCLEAR = "unclear"

def analyze_message(text: str, previous_expense=None):
    """
    Analyze message intent and extract relevant information using LLM.
    Returns a tuple of (intent, data).
    """
    system_prompt = """B·∫°n l√† tr·ª£ l√Ω ph√¢n t√≠ch tin nh·∫Øn cho bot qu·∫£n l√Ω chi ti√™u. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch √Ω ƒë·ªãnh v√† n·ªôi dung tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng.

C√°c lo·∫°i tin nh·∫Øn c√≥ th·ªÉ c√≥:
1. Ghi nh·∫≠n chi ti√™u m·ªõi (add_expense)
2. Ch·ªânh s·ª≠a chi ti√™u (edit_expense)
3. L·ªùi ch√†o ho·∫∑c x√£ giao (greeting)
4. C√¢u h·ªèi ho·∫∑c c·∫ßn tr·ª£ gi√∫p (question)
5. Kh√¥ng r√µ √Ω ƒë·ªãnh (unclear)

V·ªõi m·ªói lo·∫°i tin nh·∫Øn, h√£y tr·∫£ v·ªÅ th√¥ng tin ph√π h·ª£p theo ƒë·ªãnh d·∫°ng JSON:

1. Ghi nh·∫≠n chi ti√™u:
{
    "intent": "add_expense",
    "data": {
        "amount": s·ªë ti·ªÅn (ho·∫∑c null n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c),
        "description": "m√¥ t·∫£ chi ti√™u",
        "category": "danh m·ª•c",
        "confidence": 0.0 ƒë·∫øn 1.0,
        "needs_clarification": true/false,
        "clarification_question": "c√¢u h·ªèi l√†m r√µ (n·∫øu c·∫ßn)"
    }
}

2. Ch·ªânh s·ª≠a chi ti√™u:
{
    "intent": "edit_expense",
    "data": {
        "amount": s·ªë ti·ªÅn m·ªõi (ho·∫∑c null n·∫øu gi·ªØ nguy√™n),
        "description": "m√¥ t·∫£ m·ªõi (ho·∫∑c null n·∫øu gi·ªØ nguy√™n)",
        "category": "danh m·ª•c m·ªõi (ho·∫∑c null n·∫øu gi·ªØ nguy√™n)",
        "confidence": 0.0 ƒë·∫øn 1.0,
        "needs_clarification": true/false,
        "clarification_question": "c√¢u h·ªèi l√†m r√µ (n·∫øu c·∫ßn)"
    }
}

3. L·ªùi ch√†o:
{
    "intent": "greeting",
    "data": {
        "should_show_help": true/false
    }
}

4. C√¢u h·ªèi:
{
    "intent": "question",
    "data": {
        "topic": "ch·ªß ƒë·ªÅ c√¢u h·ªèi (expenses/commands/categories/other)",
        "should_show_help": true/false
    }
}

5. Kh√¥ng r√µ √Ω ƒë·ªãnh:
{
    "intent": "unclear",
    "data": {
        "possible_intents": ["danh s√°ch c√°c √Ω ƒë·ªãnh c√≥ th·ªÉ"],
        "clarification_question": "c√¢u h·ªèi l√†m r√µ theo ng·ªØ c·∫£nh"
    }
}

Quy t·∫Øc x·ª≠ l√Ω:
1. S·ªë ti·ªÅn:
   - H·ªó tr·ª£ ƒë∆°n v·ªã: k, ngh√¨n, ng√†n, tri·ªáu, tr, ƒë·ªìng, vnd, $
   - T·ª± ƒë·ªông nh√¢n v·ªõi 1000 cho 'k' ho·∫∑c 'ngh√¨n'
   - T·ª± ƒë·ªông nh√¢n v·ªõi 1000000 cho 'tr' ho·∫∑c 'tri·ªáu'
   - L√†m tr√≤n ƒë·∫øn h√†ng ngh√¨n

2. Danh m·ª•c:
   - food: ƒÉn u·ªëng, ƒë·ªì ƒÉn, th·ª©c ƒÉn, cafe, tr√† s·ªØa, nh√† h√†ng
   - transport: di chuy·ªÉn, xƒÉng, grab, taxi, xe bus, g·ª≠i xe
   - shopping: mua s·∫Øm, qu·∫ßn √°o, gi√†y d√©p, ph·ª• ki·ªán
   - entertainment: gi·∫£i tr√≠, xem phim, du l·ªãch, game
   - bills: h√≥a ƒë∆°n, ƒëi·ªán, n∆∞·ªõc, internet, ƒëi·ªán tho·∫°i
   - health: kh√°m b·ªánh, thu·ªëc, b·∫£o hi·ªÉm, y t·∫ø
   - education: h·ªçc ph√≠, s√°ch v·ªü, kh√≥a h·ªçc
   - other: c√°c kho·∫£n kh√°c

3. ƒê·ªô tin c·∫≠y (confidence):
   - 1.0: Ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin
   - 0.7-0.9: Kh√° ch·∫Øc ch·∫Øn
   - 0.4-0.6: Kh√¥ng ch·∫Øc ch·∫Øn, c√≥ th·ªÉ c·∫ßn l√†m r√µ
   - <0.4: R·∫•t kh√¥ng ch·∫Øc ch·∫Øn, n√™n h·ªèi l·∫°i

4. X·ª≠ l√Ω ng√¥n ng·ªØ ƒë·ªãa ph∆∞∆°ng:
   - Linh ho·∫°t v·ªõi c√°ch di·ªÖn ƒë·∫°t
   - Hi·ªÉu c√°c t·ª´ ƒë·ªãa ph∆∞∆°ng ph·ªï bi·∫øn
   - N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, ƒë√°nh d·∫•u needs_clarification=true

5. Khi kh√¥ng r√µ √Ω ƒë·ªãnh:
   - Tr·∫£ v·ªÅ c√¢u h·ªèi l√†m r√µ m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán
   - V√≠ d·ª•:
     + "Xin l·ªói b·∫°n, m√¨nh ch∆∞a hi·ªÉu r√µ √Ω b·∫°n l·∫Øm. B·∫°n mu·ªën ghi chi ti√™u m·ªõi hay ch·ªânh s·ª≠a chi ti√™u c≈© v·∫≠y?"
     + "B·∫°n ∆°i, b·∫°n ƒëang mu·ªën ghi chi ti√™u hay ƒëang c√≥ c√¢u h·ªèi g√¨ v·∫≠y?"
     + "M√¨nh th·∫•y tin nh·∫Øn h∆°i kh√≥ hi·ªÉu. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?"
   - Tr√°nh li·ªát k√™ c√°c intent m·ªôt c√°ch m√°y m√≥c
   - Lu√¥n gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán v√† l·ªãch s·ª±"""

    user_prompt = f"Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: {text}"
    if previous_expense:
        user_prompt += f"\n\nChi ti√™u hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a:\n- S·ªë ti·ªÅn: {previous_expense['amount']}ƒë\n- M√¥ t·∫£: {previous_expense['description']}\n- Danh m·ª•c: {previous_expense['category']}"

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            response_format={"type": "json_object"},
            temperature=0.1
        )
        
        result = json.loads(response.choices[0].message.content)
        return MessageIntent(result["intent"]), result["data"]
        
    except Exception as e:
        print(f"Error analyzing message: {e}")
        return MessageIntent.UNCLEAR, {
            "possible_intents": [],
            "clarification_question": "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu √Ω c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?"
        }

def format_expense_message(expense_info, is_edit=False):
    """Formats expense information into a user-friendly message."""
    if expense_info.get("needs_clarification"):
        return f"‚ùì {expense_info['clarification_question']}"
        
    action = "ƒê√£ ghi nh·∫≠n l·∫°i" if is_edit else "ƒê√£ ghi nh·∫≠n"
    confidence = expense_info.get("confidence", 1.0)
    
    message = f"‚úÖ {action} chi ti√™u:\n"
    message += f"üí∞ S·ªë ti·ªÅn: {format_amount(expense_info['amount'])}ƒë\n"
    message += f"üìù M√¥ t·∫£: {expense_info['description']}\n"
    message += f"üè∑Ô∏è Danh m·ª•c: {expense_info['category']}"
    
    if confidence < 0.7:
        message += f"\n\n‚ùì N·∫øu th√¥ng tin tr√™n kh√¥ng ch√≠nh x√°c, b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a b·∫±ng c√°ch nh·∫Øn:\n"
        message += "- s·ª≠a th√†nh [s·ªë ti·ªÅn m·ªõi]\n"
        message += "- ƒë·ªïi th√†nh [m√¥ t·∫£ m·ªõi] [s·ªë ti·ªÅn]"
    
    return message

def format_amount(amount):
    """Formats amount with thousand separators."""
    return "{:,.0f}".format(amount) if amount else "0" 